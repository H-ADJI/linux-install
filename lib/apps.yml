- name: Install utilities and apps using Nala
  hosts: localhost
  become: true # Run as root to install packages
  tasks:
    - name: Ensure system is updated using Nala
      ansible.builtin.command:
        cmd: nala update

    - name: Install utilities using Nala
      ansible.builtin.command:
        cmd: "nala install -y {{ item }}"
      loop:
        - curl
        - wget
        - xclip
        - git
        - sed
        - unzip
        - adb
        - stow
        - tmux
        - htop
        - tree
        - vlc
        - zsh
        - jq
        - build-essential
        - cargo
        - neofetch
        - ripgrep
        - direnv
        - pipewire
        - fd-find
        - solaar
        - ranger
        - eza
        - bat
- name: Set up zsh as default shell and install Oh My Zsh
  hosts: localhost
  become: yes # Ensure elevated privileges for installing packages and changing shells
  vars:
    ansible_user: khalil
  tasks:
    - name: Install zsh
      ansible.builtin.package:
        name: zsh
        state: present

    - name: Check if zsh is already the default shell
      ansible.builtin.shell: echo $SHELL
      register: current_shell

    - name: Change default shell to zsh
      ansible.builtin.command:
        cmd: chsh -s /bin/zsh {{ ansible_user }}
      when: current_shell.stdout != "/bin/zsh"

    - name: Install Oh My Zsh
      ansible.builtin.command:
        cmd: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
- name: Download and install multiple .deb packages using Nala
  hosts: localhost
  become: true # Run as root to install packages
  vars:
    deb_packages:
      - {
          name: "fastfetch",
          url: https://github.com/fastfetch-cli/fastfetch/releases/download/2.32.1/fastfetch-linux-amd64.deb,
        }
      - {
          name: "vscode",
          url: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64,
        }
      - {
          name: "delta",
          url: https://github.com/dandavison/delta/releases/download/0.18.2/git-delta-musl_0.18.2_amd64.deb,
        }
      - {
          name: "slack",
          url: https://downloads.slack-edge.com/desktop-releases/linux/x64/4.41.105/slack-desktop-4.41.105-amd64.deb,
        }
  tasks:
    - name: Download .deb package
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "/tmp/{{ item.name }}.deb"
        mode: "0644"
      loop: "{{ deb_packages }}"
      loop_control:
        label: "{{ item.name }}" # Display the package name in the output
    - name: Install the downloaded .deb package using Nala
      ansible.builtin.command:
        cmd: "nala install -y /tmp/{{ item.name }}.deb"
      loop: "{{ deb_packages }}"
      loop_control:
        label: "{{ item.name }}" # Display the package name in the output
    - name: Remove the downloaded .deb package
      ansible.builtin.file:
        path: "/tmp/{{ item.name }}.deb"
        state: absent
      loop: "{{ deb_packages }}"
      loop_control:
        label: "{{ item.name }}" # Display the package name in the output
- name: Extract binaries from multiple tar.gz files and create symlinks
  hosts: localhost
  vars:
    apps_dir: "{{ home_dir }}/apps"
    binaries:
      - url: https://download.mozilla.org/?product=firefox-latest-ssl&os=linux64&lang=en-US
        name: "firefox"
        binaries_to_symlink:
          - "firefox/firefox"

      - url: https://github.com/junegunn/fzf/releases/download/v0.57.0/fzf-0.57.0-linux_amd64.tar.gz
        name: "fzf"

      - url: https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz
        name: nvim
        binaries_to_symlink:
          - "nvim/bin/nvim"

      - url: https://go.dev/dl/go1.23.4.linux-amd64.tar.gz
        name: "go"
        binaries_to_symlink:
          - "go/bin/go"

      - url: https://nodejs.org/dist/v22.12.0/node-v22.12.0-linux-x64.tar.xz
        name: "nodejs"
        binaries_to_symlink:
          - "node/bin/npm"
          - "node/bin/npx"
          - "node/bin/node"
  tasks:
    - name: Create the apps directory if it does not exist {{ apps_dir }}
      ansible.builtin.file:
        path: "{{ apps_dir }}"
        state: directory
        mode: "0755"

    - name: Download the tar.gz file
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "/tmp/{{ item.name }}.tar.gz"
      loop: "{{ binaries }}"

    - name: Extract the binary from the tar.gz file
      ansible.builtin.unarchive:
        src: "/tmp/{{ item.name }}.tar.gz"
        dest: "{{ apps_dir }}"
        creates: "{{ apps_dir }}/{{ item.name }}"
      loop: "{{ binaries }}"

    - name: Rename directories inside a specific folder
      ansible.builtin.shell: |
        for dir in {{ apps_dir }}/*-*/; do
          # Extract the first part of the folder name before the dash
          new_name=$(echo "$dir" | sed 's/-.*//')
          # Rename the folder
          mv "$dir" "$new_name"
        done
      args:
        executable: /bin/bash
    - name: Change owner and group for files in ~/apps
      ansible.builtin.file:
        path: "{{ home_dir }}/apps"
        owner: "khalil"
        group: "khalil"
        recurse: yes
    - include_tasks: binaries_symlink.yml
      loop: "{{ binaries }}"

    - name: Clean up the downloaded tar.gz file
      ansible.builtin.file:
        path: "/tmp/{{ item.name }}.tar.gz"
        state: absent
      loop: "{{ binaries }}"
- name: Install Tmux Plugin Manager (TPM)
  hosts: localhost
  tasks:
    - name: Ensure ~/.tmux/plugins directory exists
      file:
        path: "{{ ansible_env.HOME }}/.tmux/plugins"
        state: directory
        mode: "0755"

    - name: Clone the TPM repository
      git:
        repo: "https://github.com/tmux-plugins/tpm"
        dest: "{{ home_dir }}/.tmux/plugins/tpm"
        update: no # Skip pulling if it already exists
      become_user: khalil
- name: Install Evalcache Zsh Plugin
  hosts: localhost
  tasks:
    - name: Ensure Zsh custom plugins directory exists
      file:
        path: "{{ zsh_custom_path }}/plugins"
        state: directory
        mode: "0755"

    - name: Clone the Evalcache repository
      git:
        repo: "https://github.com/mroth/evalcache"
        dest: "{{ zsh_custom_path }}/plugins/evalcache"
        update: no # Skip pulling if it already exists
      become_user: khalil
  vars:
    zsh_custom_path: "{{ lookup('env', 'ZSH_CUSTOM') | default(ansible_env.HOME + '/.oh-my-zsh/custom') }}"
- name: Install Python 3.10
  hosts: localhost
  become: true
  tasks:
    - name: Add the deadsnakes PPA for Python 3.10 (Ubuntu-specific)
      ansible.builtin.apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present

    - name: Update apt package cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Python 3.10 and required dependencies
      ansible.builtin.apt:
        name:
          - python3.10
          - python3.10-venv
          - python3.10-dev
        state: present

    - name: Verify Python 3.10 installation
      ansible.builtin.command:
        cmd: python3.10 --version
      register: python_version
      changed_when: false

    - name: Display Python version
      ansible.builtin.debug:
        msg: "Installed Python version: {{ python_version.stdout }}"
